When would you want to create a remote repository rather than keeping all your work local?
    
    Creating a remote repository allow you to work on the go and collaborate your work simutaneously with your friends. 

Why might you want to always pull changes manually rather than having Git automatically stay up-to-date with your remote repository?

	Manual pulling is better than automatic pulling because you have control over what branch gets pull and when it is pulled so that you can finish your part without interference from an automatic pull, making changes from under your feet.

Describe the differences between forks, clones, and branches. When would you use one instead of another?

// https://github.com/name1uda/reflections/blob/master/lesson_3_reflections.txt
	
	Fork is a special clone on github, clone is simply copying a repository, and branches are used to give one or more commits a name and to separate them from the rest of the changes and commits on the repository.

// https://github.com/cbuckey-uda/reflections/blob/master/lesson_3_reflections.txt

	Forks, clones, and branches are all ways to add new changes without
    affecting the existing version.  With branches the new changes are added in
    the same repository.  Forking and cloning both copy an entire repository to
    a new location.  The difference between forking and cloning is that forking
    is a special construct made by GitHub.  You can only fork a GitHub
    repository to another location on GitHub, while you can clone any Git
    repository to anywhere you have access to.

    I use branching for most cases where I want to add new changes to a
    repository while keeping an easy reference to a previous version, especially
    when collaborating with other people.  I clone a repository on GitHub when I
    want to work on that repository locally rather than using the GitHub
    website.  I fork a repository on GitHub when I want to make changes to that
    repository public, but I don't have permission to modify the original.

// https://github.com/geekveek/reflections/blob/master/lesson_3_reflections.txt    

	Fork is when I want to use other people's codes on github while attributing to them. Clone is when I want to download the repo from remote and branch is when I want to work on a new feature or solve a bug without affecting the main production line

What is the benefit of having a copy of the last known state of the remote stored locally?

	In case you go offline you can still have the last known state.
	
	One can work on the last known state while offline.

	To see what the files look like on the different-oil branch, I can click on it, which is analogous to running git checkout.

How would you collaborate without using Git or GitHub? What would be easier, and what would be harder?

	Collaboration between other team members would be extremely difficult since other plateforms may not offer the same collaboration features that can be found in Git and Github. 

	Using other plateform, learning curve would be easier.
	
	If I had to collaborate on a coding project without using Git or GitHub (or any other form of version control designed for code), I might suggest that we all make changes to a shared folder, for example, a DropBox folder.  This would be a ligter-weight solution than using Git and GitHub.  However, if we both wanted to work on the same part of the file, it would be very difficult
    to avoid clobbering each other's changes.

    Real-time collaborative editors like Google Docs are also great for
    collaboration, but I don't know a good version of Google Docs for code. Even if I did, I would be hesitant to use this approach on code that it's important to keep bug-free.  I would be worried that someone else would add a change that combined with my change to make a bug, and I might not even notice their change!

	-the learning curb will be easier, since most likely it will be a series of conversations, but it would be much more verbose and much harder since there be none of the git features.

When would you want to make changes in a separate branch rather than directly in master? What benefits does each approach have?

	Trying out a new feature in a project would be perfect for making changes in a seperate branch. 

	When trying out a new feature in a project, I prefer working in a seperate branch is better because you can switch between them as you choose to. 

	On the other hand, having just one master is simpler. 

	One big advantage is that this way merge conflicts can be resolved locally by pulling the master, and then merging it in the local branch.

	I tend to work directly in master more often when I'm working on my own or with just one or two other people.  When working with a large group, though, using branches to keep track of which changes have already been reviewed and approved is extremely helpful.
	
Testing Merging Remote Changes / Nov 18, 2015 
	Sarah writes that you should run git fetch branch_name or git fetch master by mistake. Instead, you should run git fetch remote_name, which will fetch all branches from the given remote, or git fetch with no arguments, which fetches all branches from the origin remote.
	
